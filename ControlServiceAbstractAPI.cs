/* 
 * test api
 *
 * Sample API for test case for k8s
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public abstract class IControlServiceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get individual event
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="secret"> (optional)</param>
        /// <param name="_params"> (optional)</param>
        /// <returns>Event</returns>
        Event GetEvent (string id = default(string), string secret = default(string), List<UniqueEvent> _params = default(List<UniqueEvent>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get individual event
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="secret"> (optional)</param>
        /// <param name="_params"> (optional)</param>
        /// <returns>ApiResponse of Event</returns>
        ApiResponse<Event> GetEventWithHttpInfo (string id = default(string), string secret = default(string), List<UniqueEvent> _params = default(List<UniqueEvent>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of upcoming events
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="secret"> (optional)</param>
        /// <param name="_params"> (optional)</param>
        /// <returns>EventResponse</returns>
        EventResponse UpcomingEvents (string id = default(string), string secret = default(string), EventRequest _params = default(EventRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of upcoming events
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="secret"> (optional)</param>
        /// <param name="_params"> (optional)</param>
        /// <returns>ApiResponse of EventResponse</returns>
        ApiResponse<EventResponse> UpcomingEventsWithHttpInfo (string id = default(string), string secret = default(string), EventRequest _params = default(EventRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IControlServiceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get individual event
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="secret"> (optional)</param>
        /// <param name="_params"> (optional)</param>
        /// <returns>Task of Event</returns>
        System.Threading.Tasks.Task<Event> GetEventAsync (string id = default(string), string secret = default(string), List<UniqueEvent> _params = default(List<UniqueEvent>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get individual event
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="secret"> (optional)</param>
        /// <param name="_params"> (optional)</param>
        /// <returns>Task of ApiResponse (Event)</returns>
        System.Threading.Tasks.Task<ApiResponse<Event>> GetEventAsyncWithHttpInfo (string id = default(string), string secret = default(string), List<UniqueEvent> _params = default(List<UniqueEvent>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of upcoming events
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="secret"> (optional)</param>
        /// <param name="_params"> (optional)</param>
        /// <returns>Task of EventResponse</returns>
        System.Threading.Tasks.Task<EventResponse> UpcomingEventsAsync (string id = default(string), string secret = default(string), EventRequest _params = default(EventRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of upcoming events
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="secret"> (optional)</param>
        /// <param name="_params"> (optional)</param>
        /// <returns>Task of ApiResponse (EventResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventResponse>> UpcomingEventsAsyncWithHttpInfo (string id = default(string), string secret = default(string), EventRequest _params = default(EventRequest));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IControlServiceApi : IControlServiceApiSync, IControlServiceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ControlServiceApi : IControlServiceApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ControlServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ControlServiceApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ControlServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ControlServiceApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ControlServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ControlServiceApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ControlServiceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ControlServiceApi(Org.OpenAPITools.Client.ISynchronousClient client,Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  get individual event
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="secret"> (optional)</param>
        /// <param name="_params"> (optional)</param>
        /// <returns>Event</returns>
        public Event GetEvent (string id = default(string), string secret = default(string), List<UniqueEvent> _params = default(List<UniqueEvent>))
        {
             Org.OpenAPITools.Client.ApiResponse<Event> localVarResponse = GetEventWithHttpInfo(id, secret, _params);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  get individual event
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="secret"> (optional)</param>
        /// <param name="_params"> (optional)</param>
        /// <returns>ApiResponse of Event</returns>
        public Org.OpenAPITools.Client.ApiResponse< Event > GetEventWithHttpInfo (string id = default(string), string secret = default(string), List<UniqueEvent> _params = default(List<UniqueEvent>))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
            {
                localVarRequestOptions.FormParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // form parameter
            }
            if (secret != null)
            {
                localVarRequestOptions.FormParameters.Add("secret", Org.OpenAPITools.Client.ClientUtils.ParameterToString(secret)); // form parameter
            }
            if (_params != null)
            {
                localVarRequestOptions.FormParameters.Add("params", Org.OpenAPITools.Client.ClientUtils.ParameterToString(_params)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Post< Event >("/event/getstatus", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEvent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  get individual event
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="secret"> (optional)</param>
        /// <param name="_params"> (optional)</param>
        /// <returns>Task of Event</returns>
        public async System.Threading.Tasks.Task<Event> GetEventAsync (string id = default(string), string secret = default(string), List<UniqueEvent> _params = default(List<UniqueEvent>))
        {
             Org.OpenAPITools.Client.ApiResponse<Event> localVarResponse = await GetEventAsyncWithHttpInfo(id, secret, _params);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  get individual event
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="secret"> (optional)</param>
        /// <param name="_params"> (optional)</param>
        /// <returns>Task of ApiResponse (Event)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Event>> GetEventAsyncWithHttpInfo (string id = default(string), string secret = default(string), List<UniqueEvent> _params = default(List<UniqueEvent>))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
            {
                localVarRequestOptions.FormParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // form parameter
            }
            if (secret != null)
            {
                localVarRequestOptions.FormParameters.Add("secret", Org.OpenAPITools.Client.ClientUtils.ParameterToString(secret)); // form parameter
            }
            if (_params != null)
            {
                localVarRequestOptions.FormParameters.Add("params", Org.OpenAPITools.Client.ClientUtils.ParameterToString(_params)); // form parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Event>("/event/getstatus", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEvent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get the list of upcoming events
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="secret"> (optional)</param>
        /// <param name="_params"> (optional)</param>
        /// <returns>EventResponse</returns>
        public EventResponse UpcomingEvents (string id = default(string), string secret = default(string), EventRequest _params = default(EventRequest))
        {
             Org.OpenAPITools.Client.ApiResponse<EventResponse> localVarResponse = UpcomingEventsWithHttpInfo(id, secret, _params);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the list of upcoming events
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="secret"> (optional)</param>
        /// <param name="_params"> (optional)</param>
        /// <returns>ApiResponse of EventResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse< EventResponse > UpcomingEventsWithHttpInfo (string id = default(string), string secret = default(string), EventRequest _params = default(EventRequest))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
            {
                localVarRequestOptions.FormParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // form parameter
            }
            if (secret != null)
            {
                localVarRequestOptions.FormParameters.Add("secret", Org.OpenAPITools.Client.ClientUtils.ParameterToString(secret)); // form parameter
            }
            if (_params != null)
            {
                localVarRequestOptions.FormParameters.Add("params", Org.OpenAPITools.Client.ClientUtils.ParameterToString(_params)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Post< EventResponse >("/event/upcoming", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpcomingEvents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get the list of upcoming events
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="secret"> (optional)</param>
        /// <param name="_params"> (optional)</param>
        /// <returns>Task of EventResponse</returns>
        public async System.Threading.Tasks.Task<EventResponse> UpcomingEventsAsync (string id = default(string), string secret = default(string), EventRequest _params = default(EventRequest))
        {
             Org.OpenAPITools.Client.ApiResponse<EventResponse> localVarResponse = await UpcomingEventsAsyncWithHttpInfo(id, secret, _params);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get the list of upcoming events
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="secret"> (optional)</param>
        /// <param name="_params"> (optional)</param>
        /// <returns>Task of ApiResponse (EventResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<EventResponse>> UpcomingEventsAsyncWithHttpInfo (string id = default(string), string secret = default(string), EventRequest _params = default(EventRequest))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
            {
                localVarRequestOptions.FormParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // form parameter
            }
            if (secret != null)
            {
                localVarRequestOptions.FormParameters.Add("secret", Org.OpenAPITools.Client.ClientUtils.ParameterToString(secret)); // form parameter
            }
            if (_params != null)
            {
                localVarRequestOptions.FormParameters.Add("params", Org.OpenAPITools.Client.ClientUtils.ParameterToString(_params)); // form parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<EventResponse>("/event/upcoming", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpcomingEvents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
